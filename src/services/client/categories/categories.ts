/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Simbora API
 * Documenta√ß√£o da API Simbora
 * OpenAPI spec version: 1.0.0
 */
import {useMutation, useQuery} from 'react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from 'react-query';

import type {
  DeleteCategoriesId404,
  GetCategories200Item,
  GetCategoriesId200,
  GetCategoriesId404,
  GetCategoriesParams,
  PostCategories201,
  PostCategories400,
  PostCategories404,
  PostCategoriesBody,
  PutCategoriesId200,
  PutCategoriesId400,
  PutCategoriesId404,
  PutCategoriesIdBody,
} from '.././models';

import {axiosInstance} from '../../axios';
import type {ErrorType, BodyType} from '../../axios';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Lista todas as categorias ou filtra por categoria pai
 * @summary Listar categorias
 */
export const getCategories = (
  params?: GetCategoriesParams,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal,
) => {
  return axiosInstance<GetCategories200Item[]>(
    {url: '/categories', method: 'GET', params, signal},
    options,
  );
};

export const getGetCategoriesQueryKey = (params?: GetCategoriesParams) => {
  return ['/categories', ...(params ? [params] : [])] as const;
};

export const getGetCategoriesQueryOptions = <
  TData = Awaited<ReturnType<typeof getCategories>>,
  TError = ErrorType<unknown>,
>(
  params?: GetCategoriesParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getCategories>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
) => {
  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCategoriesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCategories>>> = ({
    signal,
  }) => getCategories(params, requestOptions, signal);

  return {queryKey, queryFn, ...queryOptions} as UseQueryOptions<
    Awaited<ReturnType<typeof getCategories>>,
    TError,
    TData
  > & {queryKey: QueryKey};
};

export type GetCategoriesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCategories>>
>;
export type GetCategoriesQueryError = ErrorType<unknown>;

/**
 * @summary Listar categorias
 */

export function useGetCategories<
  TData = Awaited<ReturnType<typeof getCategories>>,
  TError = ErrorType<unknown>,
>(
  params?: GetCategoriesParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getCategories>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} {
  const queryOptions = getGetCategoriesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Cria uma nova categoria com upload de imagem
 * @summary Criar nova categoria
 */
export const postCategories = (
  postCategoriesBody: BodyType<PostCategoriesBody>,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal,
) => {
  const formData = new FormData();
  formData.append('name', postCategoriesBody.name);
  if (postCategoriesBody.description !== undefined) {
    formData.append('description', postCategoriesBody.description);
  }
  if (postCategoriesBody.categoryId !== undefined) {
    formData.append('categoryId', postCategoriesBody.categoryId.toString());
  }
  formData.append('image', postCategoriesBody.image);

  return axiosInstance<PostCategories201>(
    {
      url: '/categories',
      method: 'POST',
      headers: {'Content-Type': 'multipart/form-data'},
      data: formData,
      signal,
    },
    options,
  );
};

export const getPostCategoriesMutationOptions = <
  TError = ErrorType<PostCategories400 | PostCategories404>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCategories>>,
    TError,
    {data: BodyType<PostCategoriesBody>},
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postCategories>>,
  TError,
  {data: BodyType<PostCategoriesBody>},
  TContext
> => {
  const mutationKey = ['postCategories'];
  const {mutation: mutationOptions, request: requestOptions} = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : {...options, mutation: {...options.mutation, mutationKey}}
    : {mutation: {mutationKey}, request: undefined};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postCategories>>,
    {data: BodyType<PostCategoriesBody>}
  > = props => {
    const {data} = props ?? {};

    return postCategories(data, requestOptions);
  };

  return {mutationFn, ...mutationOptions};
};

export type PostCategoriesMutationResult = NonNullable<
  Awaited<ReturnType<typeof postCategories>>
>;
export type PostCategoriesMutationBody = BodyType<PostCategoriesBody>;
export type PostCategoriesMutationError = ErrorType<
  PostCategories400 | PostCategories404
>;

/**
 * @summary Criar nova categoria
 */
export const usePostCategories = <
  TError = ErrorType<PostCategories400 | PostCategories404>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCategories>>,
    TError,
    {data: BodyType<PostCategoriesBody>},
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postCategories>>,
  TError,
  {data: BodyType<PostCategoriesBody>},
  TContext
> => {
  const mutationOptions = getPostCategoriesMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Retorna uma categoria espec√≠fica com seus dados e categoria pai
 * @summary Buscar categoria por ID
 */
export const getCategoriesId = (
  id: number,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal,
) => {
  return axiosInstance<GetCategoriesId200>(
    {url: `/categories/${id}`, method: 'GET', signal},
    options,
  );
};

export const getGetCategoriesIdQueryKey = (id: number) => {
  return [`/categories/${id}`] as const;
};

export const getGetCategoriesIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getCategoriesId>>,
  TError = ErrorType<GetCategoriesId404>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getCategoriesId>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
) => {
  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCategoriesIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCategoriesId>>> = ({
    signal,
  }) => getCategoriesId(id, requestOptions, signal);

  return {queryKey, queryFn, enabled: !!id, ...queryOptions} as UseQueryOptions<
    Awaited<ReturnType<typeof getCategoriesId>>,
    TError,
    TData
  > & {queryKey: QueryKey};
};

export type GetCategoriesIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCategoriesId>>
>;
export type GetCategoriesIdQueryError = ErrorType<GetCategoriesId404>;

/**
 * @summary Buscar categoria por ID
 */

export function useGetCategoriesId<
  TData = Awaited<ReturnType<typeof getCategoriesId>>,
  TError = ErrorType<GetCategoriesId404>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getCategoriesId>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} {
  const queryOptions = getGetCategoriesIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Atualiza uma categoria existente
 * @summary Atualizar categoria
 */
export const putCategoriesId = (
  id: number,
  putCategoriesIdBody: BodyType<PutCategoriesIdBody>,
  options?: SecondParameter<typeof axiosInstance>,
) => {
  const formData = new FormData();
  formData.append('name', putCategoriesIdBody.name);
  if (putCategoriesIdBody.description !== undefined) {
    formData.append('description', putCategoriesIdBody.description);
  }
  if (putCategoriesIdBody.categoryId !== undefined) {
    formData.append('categoryId', putCategoriesIdBody.categoryId.toString());
  }
  formData.append('image', putCategoriesIdBody.image);

  return axiosInstance<PutCategoriesId200>(
    {
      url: `/categories/${id}`,
      method: 'PUT',
      headers: {'Content-Type': 'multipart/form-data'},
      data: formData,
    },
    options,
  );
};

export const getPutCategoriesIdMutationOptions = <
  TError = ErrorType<PutCategoriesId400 | PutCategoriesId404>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putCategoriesId>>,
    TError,
    {id: number; data: BodyType<PutCategoriesIdBody>},
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putCategoriesId>>,
  TError,
  {id: number; data: BodyType<PutCategoriesIdBody>},
  TContext
> => {
  const mutationKey = ['putCategoriesId'];
  const {mutation: mutationOptions, request: requestOptions} = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : {...options, mutation: {...options.mutation, mutationKey}}
    : {mutation: {mutationKey}, request: undefined};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putCategoriesId>>,
    {id: number; data: BodyType<PutCategoriesIdBody>}
  > = props => {
    const {id, data} = props ?? {};

    return putCategoriesId(id, data, requestOptions);
  };

  return {mutationFn, ...mutationOptions};
};

export type PutCategoriesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putCategoriesId>>
>;
export type PutCategoriesIdMutationBody = BodyType<PutCategoriesIdBody>;
export type PutCategoriesIdMutationError = ErrorType<
  PutCategoriesId400 | PutCategoriesId404
>;

/**
 * @summary Atualizar categoria
 */
export const usePutCategoriesId = <
  TError = ErrorType<PutCategoriesId400 | PutCategoriesId404>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putCategoriesId>>,
    TError,
    {id: number; data: BodyType<PutCategoriesIdBody>},
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof putCategoriesId>>,
  TError,
  {id: number; data: BodyType<PutCategoriesIdBody>},
  TContext
> => {
  const mutationOptions = getPutCategoriesIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Remove uma categoria do sistema
 * @summary Deletar categoria
 */
export const deleteCategoriesId = (
  id: number,
  options?: SecondParameter<typeof axiosInstance>,
) => {
  return axiosInstance<void>(
    {url: `/categories/${id}`, method: 'DELETE'},
    options,
  );
};

export const getDeleteCategoriesIdMutationOptions = <
  TError = ErrorType<DeleteCategoriesId404>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCategoriesId>>,
    TError,
    {id: number},
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteCategoriesId>>,
  TError,
  {id: number},
  TContext
> => {
  const mutationKey = ['deleteCategoriesId'];
  const {mutation: mutationOptions, request: requestOptions} = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : {...options, mutation: {...options.mutation, mutationKey}}
    : {mutation: {mutationKey}, request: undefined};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteCategoriesId>>,
    {id: number}
  > = props => {
    const {id} = props ?? {};

    return deleteCategoriesId(id, requestOptions);
  };

  return {mutationFn, ...mutationOptions};
};

export type DeleteCategoriesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteCategoriesId>>
>;

export type DeleteCategoriesIdMutationError = ErrorType<DeleteCategoriesId404>;

/**
 * @summary Deletar categoria
 */
export const useDeleteCategoriesId = <
  TError = ErrorType<DeleteCategoriesId404>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCategoriesId>>,
    TError,
    {id: number},
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteCategoriesId>>,
  TError,
  {id: number},
  TContext
> => {
  const mutationOptions = getDeleteCategoriesIdMutationOptions(options);

  return useMutation(mutationOptions);
};
