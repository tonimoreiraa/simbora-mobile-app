/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Simbora API
 * Documenta√ß√£o da API Simbora
 * OpenAPI spec version: 1.0.0
 */
import {useQuery} from 'react-query';
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult,
} from 'react-query';

import type {
  GetNotifications200,
  GetNotifications401,
  GetNotifications500,
} from '.././models';

import {axiosInstance} from '../../axios';
import type {ErrorType} from '../../axios';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Retorna todas as notifica√ß√µes (pedidos compartilhados) n√£o visualizadas do usu√°rio autenticado
 * @summary Listar notifica√ß√µes n√£o visualizadas
 */
export const getNotifications = (
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal,
) => {
  return axiosInstance<GetNotifications200>(
    {url: `/notifications`, method: 'GET', signal},
    options,
  );
};

export const getGetNotificationsQueryKey = () => {
  return [`/notifications`] as const;
};

export const getGetNotificationsQueryOptions = <
  TData = Awaited<ReturnType<typeof getNotifications>>,
  TError = ErrorType<GetNotifications401 | GetNotifications500>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getNotifications>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof axiosInstance>;
}) => {
  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetNotificationsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getNotifications>>
  > = ({signal}) => getNotifications(requestOptions, signal);

  return {queryKey, queryFn, ...queryOptions} as UseQueryOptions<
    Awaited<ReturnType<typeof getNotifications>>,
    TError,
    TData
  > & {queryKey: QueryKey};
};

export type GetNotificationsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getNotifications>>
>;
export type GetNotificationsQueryError = ErrorType<
  GetNotifications401 | GetNotifications500
>;

/**
 * @summary Listar notifica√ß√µes n√£o visualizadas
 */

export function useGetNotifications<
  TData = Awaited<ReturnType<typeof getNotifications>>,
  TError = ErrorType<GetNotifications401 | GetNotifications500>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getNotifications>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} {
  const queryOptions = getGetNotificationsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
