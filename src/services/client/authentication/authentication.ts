/**
 * Generated by orval v7.10.0 游꽄
 * Do not edit manually.
 * Simbora API
 * Documenta칞칚o da API Simbora
 * OpenAPI spec version: 1.0.0
 */
import {useMutation, useQuery} from 'react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from 'react-query';

import type {
  GetAuthSession200,
  GetAuthSession401,
  GetAuthSession500,
  PostAuthSignIn200,
  PostAuthSignIn400,
  PostAuthSignIn401,
  PostAuthSignIn422,
  PostAuthSignIn500,
  PostAuthSignInBody,
  PostAuthSignUp201,
  PostAuthSignUp400,
  PostAuthSignUp409,
  PostAuthSignUp413,
  PostAuthSignUp422,
  PostAuthSignUp500,
  PostAuthSignUpBodyOne,
  PostAuthSignUpBodyTwo,
} from '.././models';

import {axiosInstance} from '../../axios';
import type {ErrorType, BodyType} from '../../axios';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Realiza o login do usu치rio utilizando email e senha, retornando o token de acesso
 * @summary Login do usu치rio
 */
export const postAuthSignIn = (
  postAuthSignInBody: BodyType<PostAuthSignInBody>,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal,
) => {
  return axiosInstance<PostAuthSignIn200>(
    {
      url: `/auth/sign-in`,
      method: 'POST',
      headers: {'Content-Type': 'application/json'},
      data: postAuthSignInBody,
      signal,
    },
    options,
  );
};

export const getPostAuthSignInMutationOptions = <
  TError = ErrorType<
    | PostAuthSignIn400
    | PostAuthSignIn401
    | PostAuthSignIn422
    | PostAuthSignIn500
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAuthSignIn>>,
    TError,
    {data: BodyType<PostAuthSignInBody>},
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postAuthSignIn>>,
  TError,
  {data: BodyType<PostAuthSignInBody>},
  TContext
> => {
  const mutationKey = ['postAuthSignIn'];
  const {mutation: mutationOptions, request: requestOptions} = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : {...options, mutation: {...options.mutation, mutationKey}}
    : {mutation: {mutationKey}, request: undefined};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postAuthSignIn>>,
    {data: BodyType<PostAuthSignInBody>}
  > = props => {
    const {data} = props ?? {};

    return postAuthSignIn(data, requestOptions);
  };

  return {mutationFn, ...mutationOptions};
};

export type PostAuthSignInMutationResult = NonNullable<
  Awaited<ReturnType<typeof postAuthSignIn>>
>;
export type PostAuthSignInMutationBody = BodyType<PostAuthSignInBody>;
export type PostAuthSignInMutationError = ErrorType<
  PostAuthSignIn400 | PostAuthSignIn401 | PostAuthSignIn422 | PostAuthSignIn500
>;

/**
 * @summary Login do usu치rio
 */
export const usePostAuthSignIn = <
  TError = ErrorType<
    | PostAuthSignIn400
    | PostAuthSignIn401
    | PostAuthSignIn422
    | PostAuthSignIn500
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAuthSignIn>>,
    TError,
    {data: BodyType<PostAuthSignInBody>},
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postAuthSignIn>>,
  TError,
  {data: BodyType<PostAuthSignInBody>},
  TContext
> => {
  const mutationOptions = getPostAuthSignInMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Cria uma nova conta de usu치rio no sistema com os dados fornecidos, incluindo upload opcional de avatar
 * @summary Cadastro de novo usu치rio
 */
export const postAuthSignUp = (
  postAuthSignUpBody:
    | BodyType<PostAuthSignUpBodyOne | PostAuthSignUpBodyTwo>
    | PostAuthSignUpBodyTwo,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal,
) => {
  return axiosInstance<PostAuthSignUp201>(
    {url: `/auth/sign-up`, method: 'POST', data: postAuthSignUpBody, signal},
    options,
  );
};

export const getPostAuthSignUpMutationOptions = <
  TError = ErrorType<
    | PostAuthSignUp400
    | PostAuthSignUp409
    | PostAuthSignUp413
    | PostAuthSignUp422
    | PostAuthSignUp500
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAuthSignUp>>,
    TError,
    {data: BodyType<PostAuthSignUpBodyOne | PostAuthSignUpBodyTwo>},
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postAuthSignUp>>,
  TError,
  {data: BodyType<PostAuthSignUpBodyOne | PostAuthSignUpBodyTwo>},
  TContext
> => {
  const mutationKey = ['postAuthSignUp'];
  const {mutation: mutationOptions, request: requestOptions} = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : {...options, mutation: {...options.mutation, mutationKey}}
    : {mutation: {mutationKey}, request: undefined};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postAuthSignUp>>,
    {data: BodyType<PostAuthSignUpBodyOne | PostAuthSignUpBodyTwo>}
  > = props => {
    const {data} = props ?? {};

    return postAuthSignUp(data, requestOptions);
  };

  return {mutationFn, ...mutationOptions};
};

export type PostAuthSignUpMutationResult = NonNullable<
  Awaited<ReturnType<typeof postAuthSignUp>>
>;
export type PostAuthSignUpMutationBody = BodyType<
  PostAuthSignUpBodyOne | PostAuthSignUpBodyTwo
>;
export type PostAuthSignUpMutationError = ErrorType<
  | PostAuthSignUp400
  | PostAuthSignUp409
  | PostAuthSignUp413
  | PostAuthSignUp422
  | PostAuthSignUp500
>;

/**
 * @summary Cadastro de novo usu치rio
 */
export const usePostAuthSignUp = <
  TError = ErrorType<
    | PostAuthSignUp400
    | PostAuthSignUp409
    | PostAuthSignUp413
    | PostAuthSignUp422
    | PostAuthSignUp500
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAuthSignUp>>,
    TError,
    {data: BodyType<PostAuthSignUpBodyOne | PostAuthSignUpBodyTwo>},
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postAuthSignUp>>,
  TError,
  {data: BodyType<PostAuthSignUpBodyOne | PostAuthSignUpBodyTwo>},
  TContext
> => {
  const mutationOptions = getPostAuthSignUpMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Retorna os dados do usu치rio autenticado da sess칚o atual
 * @summary Obter sess칚o atual
 */
export const getAuthSession = (
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal,
) => {
  return axiosInstance<GetAuthSession200>(
    {url: `/auth/session`, method: 'GET', signal},
    options,
  );
};

export const getGetAuthSessionQueryKey = () => {
  return [`/auth/session`] as const;
};

export const getGetAuthSessionQueryOptions = <
  TData = Awaited<ReturnType<typeof getAuthSession>>,
  TError = ErrorType<GetAuthSession401 | GetAuthSession500>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getAuthSession>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof axiosInstance>;
}) => {
  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAuthSessionQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAuthSession>>> = ({
    signal,
  }) => getAuthSession(requestOptions, signal);

  return {queryKey, queryFn, ...queryOptions} as UseQueryOptions<
    Awaited<ReturnType<typeof getAuthSession>>,
    TError,
    TData
  > & {queryKey: QueryKey};
};

export type GetAuthSessionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAuthSession>>
>;
export type GetAuthSessionQueryError = ErrorType<
  GetAuthSession401 | GetAuthSession500
>;

/**
 * @summary Obter sess칚o atual
 */

export function useGetAuthSession<
  TData = Awaited<ReturnType<typeof getAuthSession>>,
  TError = ErrorType<GetAuthSession401 | GetAuthSession500>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getAuthSession>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} {
  const queryOptions = getGetAuthSessionQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
