/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Simbora API
 * Documenta√ß√£o da API Simbora
 * OpenAPI spec version: 1.0.0
 */
import {useMutation} from 'react-query';
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult,
} from 'react-query';

import type {
  DeleteProductVariantsId401,
  DeleteProductVariantsId404,
  PostProductVariants201,
  PostProductVariants400,
  PostProductVariants401,
  PostProductVariants422,
  PostProductVariantsBody,
  PutProductVariantsId200,
  PutProductVariantsId400,
  PutProductVariantsId401,
  PutProductVariantsId404,
  PutProductVariantsId422,
  PutProductVariantsIdBody,
} from '.././models';

import {axiosInstance} from '../../axios';
import type {ErrorType, BodyType} from '../../axios';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Cria uma nova variante para um produto existente com upload de imagem obrigat√≥ria
 * @summary Criar variante de produto
 */
export const postProductVariants = (
  postProductVariantsBody: BodyType<PostProductVariantsBody>,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal,
) => {
  const formData = new FormData();
  formData.append(`productId`, postProductVariantsBody.productId.toString());
  formData.append(
    `variantTypeId`,
    postProductVariantsBody.variantTypeId.toString(),
  );
  formData.append(`value`, postProductVariantsBody.value);
  if (postProductVariantsBody.unit !== undefined) {
    formData.append(`unit`, postProductVariantsBody.unit);
  }
  formData.append(`price`, postProductVariantsBody.price.toString());
  formData.append(`photo`, postProductVariantsBody.photo);

  return axiosInstance<PostProductVariants201>(
    {
      url: `/product-variants`,
      method: 'POST',
      headers: {'Content-Type': 'multipart/form-data'},
      data: formData,
      signal,
    },
    options,
  );
};

export const getPostProductVariantsMutationOptions = <
  TError = ErrorType<
    PostProductVariants400 | PostProductVariants401 | PostProductVariants422
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postProductVariants>>,
    TError,
    {data: BodyType<PostProductVariantsBody>},
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postProductVariants>>,
  TError,
  {data: BodyType<PostProductVariantsBody>},
  TContext
> => {
  const mutationKey = ['postProductVariants'];
  const {mutation: mutationOptions, request: requestOptions} = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : {...options, mutation: {...options.mutation, mutationKey}}
    : {mutation: {mutationKey}, request: undefined};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postProductVariants>>,
    {data: BodyType<PostProductVariantsBody>}
  > = props => {
    const {data} = props ?? {};

    return postProductVariants(data, requestOptions);
  };

  return {mutationFn, ...mutationOptions};
};

export type PostProductVariantsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postProductVariants>>
>;
export type PostProductVariantsMutationBody = BodyType<PostProductVariantsBody>;
export type PostProductVariantsMutationError = ErrorType<
  PostProductVariants400 | PostProductVariants401 | PostProductVariants422
>;

/**
 * @summary Criar variante de produto
 */
export const usePostProductVariants = <
  TError = ErrorType<
    PostProductVariants400 | PostProductVariants401 | PostProductVariants422
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postProductVariants>>,
    TError,
    {data: BodyType<PostProductVariantsBody>},
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postProductVariants>>,
  TError,
  {data: BodyType<PostProductVariantsBody>},
  TContext
> => {
  const mutationOptions = getPostProductVariantsMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Remove uma variante de produto do sistema
 * @summary Deletar variante de produto
 */
export const deleteProductVariantsId = (
  id: number,
  options?: SecondParameter<typeof axiosInstance>,
) => {
  return axiosInstance<void>(
    {url: `/product-variants/${id}`, method: 'DELETE'},
    options,
  );
};

export const getDeleteProductVariantsIdMutationOptions = <
  TError = ErrorType<DeleteProductVariantsId401 | DeleteProductVariantsId404>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteProductVariantsId>>,
    TError,
    {id: number},
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteProductVariantsId>>,
  TError,
  {id: number},
  TContext
> => {
  const mutationKey = ['deleteProductVariantsId'];
  const {mutation: mutationOptions, request: requestOptions} = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : {...options, mutation: {...options.mutation, mutationKey}}
    : {mutation: {mutationKey}, request: undefined};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteProductVariantsId>>,
    {id: number}
  > = props => {
    const {id} = props ?? {};

    return deleteProductVariantsId(id, requestOptions);
  };

  return {mutationFn, ...mutationOptions};
};

export type DeleteProductVariantsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteProductVariantsId>>
>;

export type DeleteProductVariantsIdMutationError = ErrorType<
  DeleteProductVariantsId401 | DeleteProductVariantsId404
>;

/**
 * @summary Deletar variante de produto
 */
export const useDeleteProductVariantsId = <
  TError = ErrorType<DeleteProductVariantsId401 | DeleteProductVariantsId404>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteProductVariantsId>>,
    TError,
    {id: number},
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteProductVariantsId>>,
  TError,
  {id: number},
  TContext
> => {
  const mutationOptions = getDeleteProductVariantsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Atualiza uma variante existente, incluindo op√ß√£o de trocar a imagem
 * @summary Atualizar variante de produto
 */
export const putProductVariantsId = (
  id: number,
  putProductVariantsIdBody: BodyType<PutProductVariantsIdBody>,
  options?: SecondParameter<typeof axiosInstance>,
) => {
  const formData = new FormData();
  formData.append(
    `variantTypeId`,
    putProductVariantsIdBody.variantTypeId.toString(),
  );
  formData.append(`value`, putProductVariantsIdBody.value);
  if (putProductVariantsIdBody.unit !== undefined) {
    formData.append(`unit`, putProductVariantsIdBody.unit);
  }
  formData.append(`price`, putProductVariantsIdBody.price.toString());
  if (putProductVariantsIdBody.photo !== undefined) {
    formData.append(`photo`, putProductVariantsIdBody.photo);
  }

  return axiosInstance<PutProductVariantsId200>(
    {
      url: `/product-variants/${id}`,
      method: 'PUT',
      headers: {'Content-Type': 'multipart/form-data'},
      data: formData,
    },
    options,
  );
};

export const getPutProductVariantsIdMutationOptions = <
  TError = ErrorType<
    | PutProductVariantsId400
    | PutProductVariantsId401
    | PutProductVariantsId404
    | PutProductVariantsId422
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putProductVariantsId>>,
    TError,
    {id: number; data: BodyType<PutProductVariantsIdBody>},
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putProductVariantsId>>,
  TError,
  {id: number; data: BodyType<PutProductVariantsIdBody>},
  TContext
> => {
  const mutationKey = ['putProductVariantsId'];
  const {mutation: mutationOptions, request: requestOptions} = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : {...options, mutation: {...options.mutation, mutationKey}}
    : {mutation: {mutationKey}, request: undefined};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putProductVariantsId>>,
    {id: number; data: BodyType<PutProductVariantsIdBody>}
  > = props => {
    const {id, data} = props ?? {};

    return putProductVariantsId(id, data, requestOptions);
  };

  return {mutationFn, ...mutationOptions};
};

export type PutProductVariantsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putProductVariantsId>>
>;
export type PutProductVariantsIdMutationBody =
  BodyType<PutProductVariantsIdBody>;
export type PutProductVariantsIdMutationError = ErrorType<
  | PutProductVariantsId400
  | PutProductVariantsId401
  | PutProductVariantsId404
  | PutProductVariantsId422
>;

/**
 * @summary Atualizar variante de produto
 */
export const usePutProductVariantsId = <
  TError = ErrorType<
    | PutProductVariantsId400
    | PutProductVariantsId401
    | PutProductVariantsId404
    | PutProductVariantsId422
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putProductVariantsId>>,
    TError,
    {id: number; data: BodyType<PutProductVariantsIdBody>},
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof putProductVariantsId>>,
  TError,
  {id: number; data: BodyType<PutProductVariantsIdBody>},
  TContext
> => {
  const mutationOptions = getPutProductVariantsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
