/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Simbora API
 * Documenta√ß√£o da API Simbora
 * OpenAPI spec version: 1.0.0
 */
import {useQuery} from 'react-query';
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult,
} from 'react-query';

import type {
  GetCoupons200Item,
  GetCoupons401,
  GetCoupons403,
  GetCoupons500,
  GetCouponsParams,
  GetCouponsVerifyCode200,
  GetCouponsVerifyCode404,
  GetCouponsVerifyCode422,
  GetCouponsVerifyCode500,
} from '.././models';

import {axiosInstance} from '../../axios';
import type {ErrorType} from '../../axios';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Lista todos os cupons dispon√≠veis no sistema com filtros opcionais. Requer permiss√£o de administrador.
 * @summary Listar cupons
 */
export const getCoupons = (
  params?: GetCouponsParams,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal,
) => {
  return axiosInstance<GetCoupons200Item[]>(
    {url: `/coupons`, method: 'GET', params, signal},
    options,
  );
};

export const getGetCouponsQueryKey = (params?: GetCouponsParams) => {
  return [`/coupons`, ...(params ? [params] : [])] as const;
};

export const getGetCouponsQueryOptions = <
  TData = Awaited<ReturnType<typeof getCoupons>>,
  TError = ErrorType<GetCoupons401 | GetCoupons403 | GetCoupons500>,
>(
  params?: GetCouponsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getCoupons>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
) => {
  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCouponsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCoupons>>> = ({
    signal,
  }) => getCoupons(params, requestOptions, signal);

  return {queryKey, queryFn, ...queryOptions} as UseQueryOptions<
    Awaited<ReturnType<typeof getCoupons>>,
    TError,
    TData
  > & {queryKey: QueryKey};
};

export type GetCouponsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCoupons>>
>;
export type GetCouponsQueryError = ErrorType<
  GetCoupons401 | GetCoupons403 | GetCoupons500
>;

/**
 * @summary Listar cupons
 */

export function useGetCoupons<
  TData = Awaited<ReturnType<typeof getCoupons>>,
  TError = ErrorType<GetCoupons401 | GetCoupons403 | GetCoupons500>,
>(
  params?: GetCouponsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getCoupons>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} {
  const queryOptions = getGetCouponsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Verifica se um cupom √© v√°lido para uso, considerando status ativo, limites de uso, per√≠odo de validade e outras restri√ß√µes
 * @summary Verificar validade do cupom
 */
export const getCouponsVerifyCode = (
  code: string,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal,
) => {
  return axiosInstance<GetCouponsVerifyCode200>(
    {url: `/coupons/verify/${code}`, method: 'GET', signal},
    options,
  );
};

export const getGetCouponsVerifyCodeQueryKey = (code: string) => {
  return [`/coupons/verify/${code}`] as const;
};

export const getGetCouponsVerifyCodeQueryOptions = <
  TData = Awaited<ReturnType<typeof getCouponsVerifyCode>>,
  TError = ErrorType<
    GetCouponsVerifyCode404 | GetCouponsVerifyCode422 | GetCouponsVerifyCode500
  >,
>(
  code: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getCouponsVerifyCode>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
) => {
  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetCouponsVerifyCodeQueryKey(code);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCouponsVerifyCode>>
  > = ({signal}) => getCouponsVerifyCode(code, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!code,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getCouponsVerifyCode>>,
    TError,
    TData
  > & {queryKey: QueryKey};
};

export type GetCouponsVerifyCodeQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCouponsVerifyCode>>
>;
export type GetCouponsVerifyCodeQueryError = ErrorType<
  GetCouponsVerifyCode404 | GetCouponsVerifyCode422 | GetCouponsVerifyCode500
>;

/**
 * @summary Verificar validade do cupom
 */

export function useGetCouponsVerifyCode<
  TData = Awaited<ReturnType<typeof getCouponsVerifyCode>>,
  TError = ErrorType<
    GetCouponsVerifyCode404 | GetCouponsVerifyCode422 | GetCouponsVerifyCode500
  >,
>(
  code: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getCouponsVerifyCode>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} {
  const queryOptions = getGetCouponsVerifyCodeQueryOptions(code, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
