/**
 * Generated by orval v7.10.0 游꽄
 * Do not edit manually.
 * Simbora API
 * Documenta칞칚o da API Simbora
 * OpenAPI spec version: 1.0.0
 */
import {useMutation, useQuery} from 'react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from 'react-query';

import type {
  GetProfile200,
  GetProfile401,
  GetProfile500,
  PutProfile200,
  PutProfile400,
  PutProfile401,
  PutProfile409,
  PutProfile413,
  PutProfile422,
  PutProfile500,
  PutProfileBodyOne,
  PutProfileBodyTwo,
} from '.././models';

import {axiosInstance} from '../../axios';
import type {ErrorType, BodyType} from '../../axios';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Atualiza os dados do perfil do usu치rio autenticado, incluindo upload opcional de avatar
 * @summary Atualizar perfil do usu치rio
 */
export const putProfile = (
  putProfileBody:
    | BodyType<PutProfileBodyOne | PutProfileBodyTwo>
    | PutProfileBodyTwo,
  options?: SecondParameter<typeof axiosInstance>,
) => {
  return axiosInstance<PutProfile200>(
    {url: '/profile', method: 'PUT', data: putProfileBody},
    options,
  );
};

export const getPutProfileMutationOptions = <
  TError = ErrorType<
    | PutProfile400
    | PutProfile401
    | PutProfile409
    | PutProfile413
    | PutProfile422
    | PutProfile500
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putProfile>>,
    TError,
    {data: BodyType<PutProfileBodyOne | PutProfileBodyTwo>},
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putProfile>>,
  TError,
  {data: BodyType<PutProfileBodyOne | PutProfileBodyTwo>},
  TContext
> => {
  const mutationKey = ['putProfile'];
  const {mutation: mutationOptions, request: requestOptions} = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : {...options, mutation: {...options.mutation, mutationKey}}
    : {mutation: {mutationKey}, request: undefined};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putProfile>>,
    {data: BodyType<PutProfileBodyOne | PutProfileBodyTwo>}
  > = props => {
    const {data} = props ?? {};

    return putProfile(data, requestOptions);
  };

  return {mutationFn, ...mutationOptions};
};

export type PutProfileMutationResult = NonNullable<
  Awaited<ReturnType<typeof putProfile>>
>;
export type PutProfileMutationBody = BodyType<
  PutProfileBodyOne | PutProfileBodyTwo
>;
export type PutProfileMutationError = ErrorType<
  | PutProfile400
  | PutProfile401
  | PutProfile409
  | PutProfile413
  | PutProfile422
  | PutProfile500
>;

/**
 * @summary Atualizar perfil do usu치rio
 */
export const usePutProfile = <
  TError = ErrorType<
    | PutProfile400
    | PutProfile401
    | PutProfile409
    | PutProfile413
    | PutProfile422
    | PutProfile500
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putProfile>>,
    TError,
    {data: BodyType<PutProfileBodyOne | PutProfileBodyTwo>},
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof putProfile>>,
  TError,
  {data: BodyType<PutProfileBodyOne | PutProfileBodyTwo>},
  TContext
> => {
  const mutationOptions = getPutProfileMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Retorna os dados completos do perfil do usu치rio autenticado, incluindo endere칞os associados
 * @summary Obter perfil do usu치rio
 */
export const getProfile = (
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal,
) => {
  return axiosInstance<GetProfile200>(
    {url: '/profile', method: 'GET', signal},
    options,
  );
};

export const getGetProfileQueryKey = () => {
  return ['/profile'] as const;
};

export const getGetProfileQueryOptions = <
  TData = Awaited<ReturnType<typeof getProfile>>,
  TError = ErrorType<GetProfile401 | GetProfile500>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getProfile>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof axiosInstance>;
}) => {
  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetProfileQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getProfile>>> = ({
    signal,
  }) => getProfile(requestOptions, signal);

  return {queryKey, queryFn, ...queryOptions} as UseQueryOptions<
    Awaited<ReturnType<typeof getProfile>>,
    TError,
    TData
  > & {queryKey: QueryKey};
};

export type GetProfileQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProfile>>
>;
export type GetProfileQueryError = ErrorType<GetProfile401 | GetProfile500>;

/**
 * @summary Obter perfil do usu치rio
 */

export function useGetProfile<
  TData = Awaited<ReturnType<typeof getProfile>>,
  TError = ErrorType<GetProfile401 | GetProfile500>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getProfile>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} {
  const queryOptions = getGetProfileQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
