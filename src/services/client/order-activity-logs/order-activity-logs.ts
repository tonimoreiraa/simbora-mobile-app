/**
 * Generated by orval v7.10.0 游꽄
 * Do not edit manually.
 * Simbora API
 * Documenta칞칚o da API Simbora
 * OpenAPI spec version: 1.0.0
 */
import {useMutation, useQuery} from 'react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from 'react-query';

import type {
  GetOrdersOrderIdActivityLogs200Item,
  GetOrdersOrderIdActivityLogsParams,
  GetUsersUserIdActivityLogs200Item,
  GetUsersUserIdActivityLogsParams,
  PostOrdersOrderIdActivityLogs201,
  PostOrdersOrderIdActivityLogsBody,
} from '.././models';

import {axiosInstance} from '../../axios';
import type {ErrorType, BodyType} from '../../axios';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Retorna o hist칩rico de atividades de um pedido espec칤fico
 * @summary Obter logs de atividade de um pedido
 */
export const getOrdersOrderIdActivityLogs = (
  orderId: number,
  params?: GetOrdersOrderIdActivityLogsParams,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal,
) => {
  return axiosInstance<GetOrdersOrderIdActivityLogs200Item[]>(
    {url: `/orders/${orderId}/activity-logs`, method: 'GET', params, signal},
    options,
  );
};

export const getGetOrdersOrderIdActivityLogsQueryKey = (
  orderId: number,
  params?: GetOrdersOrderIdActivityLogsParams,
) => {
  return [
    `/orders/${orderId}/activity-logs`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetOrdersOrderIdActivityLogsQueryOptions = <
  TData = Awaited<ReturnType<typeof getOrdersOrderIdActivityLogs>>,
  TError = ErrorType<void>,
>(
  orderId: number,
  params?: GetOrdersOrderIdActivityLogsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getOrdersOrderIdActivityLogs>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
) => {
  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetOrdersOrderIdActivityLogsQueryKey(orderId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getOrdersOrderIdActivityLogs>>
  > = ({signal}) =>
    getOrdersOrderIdActivityLogs(orderId, params, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!orderId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getOrdersOrderIdActivityLogs>>,
    TError,
    TData
  > & {queryKey: QueryKey};
};

export type GetOrdersOrderIdActivityLogsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getOrdersOrderIdActivityLogs>>
>;
export type GetOrdersOrderIdActivityLogsQueryError = ErrorType<void>;

/**
 * @summary Obter logs de atividade de um pedido
 */

export function useGetOrdersOrderIdActivityLogs<
  TData = Awaited<ReturnType<typeof getOrdersOrderIdActivityLogs>>,
  TError = ErrorType<void>,
>(
  orderId: number,
  params?: GetOrdersOrderIdActivityLogsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getOrdersOrderIdActivityLogs>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} {
  const queryOptions = getGetOrdersOrderIdActivityLogsQueryOptions(
    orderId,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Cria um log de atividade customizado para um pedido. Apenas admins e suppliers podem criar logs.
 * @summary Criar log de atividade customizado
 */
export const postOrdersOrderIdActivityLogs = (
  orderId: number,
  postOrdersOrderIdActivityLogsBody: BodyType<PostOrdersOrderIdActivityLogsBody>,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal,
) => {
  return axiosInstance<PostOrdersOrderIdActivityLogs201>(
    {
      url: `/orders/${orderId}/activity-logs`,
      method: 'POST',
      headers: {'Content-Type': 'application/json'},
      data: postOrdersOrderIdActivityLogsBody,
      signal,
    },
    options,
  );
};

export const getPostOrdersOrderIdActivityLogsMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postOrdersOrderIdActivityLogs>>,
    TError,
    {orderId: number; data: BodyType<PostOrdersOrderIdActivityLogsBody>},
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postOrdersOrderIdActivityLogs>>,
  TError,
  {orderId: number; data: BodyType<PostOrdersOrderIdActivityLogsBody>},
  TContext
> => {
  const mutationKey = ['postOrdersOrderIdActivityLogs'];
  const {mutation: mutationOptions, request: requestOptions} = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : {...options, mutation: {...options.mutation, mutationKey}}
    : {mutation: {mutationKey}, request: undefined};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postOrdersOrderIdActivityLogs>>,
    {orderId: number; data: BodyType<PostOrdersOrderIdActivityLogsBody>}
  > = props => {
    const {orderId, data} = props ?? {};

    return postOrdersOrderIdActivityLogs(orderId, data, requestOptions);
  };

  return {mutationFn, ...mutationOptions};
};

export type PostOrdersOrderIdActivityLogsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postOrdersOrderIdActivityLogs>>
>;
export type PostOrdersOrderIdActivityLogsMutationBody =
  BodyType<PostOrdersOrderIdActivityLogsBody>;
export type PostOrdersOrderIdActivityLogsMutationError = ErrorType<void>;

/**
 * @summary Criar log de atividade customizado
 */
export const usePostOrdersOrderIdActivityLogs = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postOrdersOrderIdActivityLogs>>,
    TError,
    {orderId: number; data: BodyType<PostOrdersOrderIdActivityLogsBody>},
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postOrdersOrderIdActivityLogs>>,
  TError,
  {orderId: number; data: BodyType<PostOrdersOrderIdActivityLogsBody>},
  TContext
> => {
  const mutationOptions =
    getPostOrdersOrderIdActivityLogsMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Retorna o hist칩rico de atividades de um usu치rio espec칤fico. Apenas admins ou o pr칩prio usu치rio podem acessar.
 * @summary Obter logs de atividade de um usu치rio
 */
export const getUsersUserIdActivityLogs = (
  userId: number,
  params?: GetUsersUserIdActivityLogsParams,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal,
) => {
  return axiosInstance<GetUsersUserIdActivityLogs200Item[]>(
    {url: `/users/${userId}/activity-logs`, method: 'GET', params, signal},
    options,
  );
};

export const getGetUsersUserIdActivityLogsQueryKey = (
  userId: number,
  params?: GetUsersUserIdActivityLogsParams,
) => {
  return [
    `/users/${userId}/activity-logs`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetUsersUserIdActivityLogsQueryOptions = <
  TData = Awaited<ReturnType<typeof getUsersUserIdActivityLogs>>,
  TError = ErrorType<void>,
>(
  userId: number,
  params?: GetUsersUserIdActivityLogsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getUsersUserIdActivityLogs>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
) => {
  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetUsersUserIdActivityLogsQueryKey(userId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getUsersUserIdActivityLogs>>
  > = ({signal}) =>
    getUsersUserIdActivityLogs(userId, params, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!userId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getUsersUserIdActivityLogs>>,
    TError,
    TData
  > & {queryKey: QueryKey};
};

export type GetUsersUserIdActivityLogsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUsersUserIdActivityLogs>>
>;
export type GetUsersUserIdActivityLogsQueryError = ErrorType<void>;

/**
 * @summary Obter logs de atividade de um usu치rio
 */

export function useGetUsersUserIdActivityLogs<
  TData = Awaited<ReturnType<typeof getUsersUserIdActivityLogs>>,
  TError = ErrorType<void>,
>(
  userId: number,
  params?: GetUsersUserIdActivityLogsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getUsersUserIdActivityLogs>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} {
  const queryOptions = getGetUsersUserIdActivityLogsQueryOptions(
    userId,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
