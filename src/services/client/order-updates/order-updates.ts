/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Simbora API
 * Documenta√ß√£o da API Simbora
 * OpenAPI spec version: 1.0.0
 */
import {useMutation} from 'react-query';
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult,
} from 'react-query';

import type {
  PostOrderUpdates201,
  PostOrderUpdates400,
  PostOrderUpdates401,
  PostOrderUpdates404,
  PostOrderUpdates422,
  PostOrderUpdatesBody,
} from '.././models';

import {axiosInstance} from '../../axios';
import type {ErrorType, BodyType} from '../../axios';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Cria uma nova atualiza√ß√£o para um pedido, alterando seu status e adicionando informa√ß√µes
 * @summary Criar atualiza√ß√£o de pedido
 */
export const postOrderUpdates = (
  postOrderUpdatesBody: BodyType<PostOrderUpdatesBody>,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal,
) => {
  return axiosInstance<PostOrderUpdates201>(
    {
      url: `/order-updates`,
      method: 'POST',
      headers: {'Content-Type': 'application/json'},
      data: postOrderUpdatesBody,
      signal,
    },
    options,
  );
};

export const getPostOrderUpdatesMutationOptions = <
  TError = ErrorType<
    | PostOrderUpdates400
    | PostOrderUpdates401
    | PostOrderUpdates404
    | PostOrderUpdates422
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postOrderUpdates>>,
    TError,
    {data: BodyType<PostOrderUpdatesBody>},
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postOrderUpdates>>,
  TError,
  {data: BodyType<PostOrderUpdatesBody>},
  TContext
> => {
  const mutationKey = ['postOrderUpdates'];
  const {mutation: mutationOptions, request: requestOptions} = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : {...options, mutation: {...options.mutation, mutationKey}}
    : {mutation: {mutationKey}, request: undefined};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postOrderUpdates>>,
    {data: BodyType<PostOrderUpdatesBody>}
  > = props => {
    const {data} = props ?? {};

    return postOrderUpdates(data, requestOptions);
  };

  return {mutationFn, ...mutationOptions};
};

export type PostOrderUpdatesMutationResult = NonNullable<
  Awaited<ReturnType<typeof postOrderUpdates>>
>;
export type PostOrderUpdatesMutationBody = BodyType<PostOrderUpdatesBody>;
export type PostOrderUpdatesMutationError = ErrorType<
  | PostOrderUpdates400
  | PostOrderUpdates401
  | PostOrderUpdates404
  | PostOrderUpdates422
>;

/**
 * @summary Criar atualiza√ß√£o de pedido
 */
export const usePostOrderUpdates = <
  TError = ErrorType<
    | PostOrderUpdates400
    | PostOrderUpdates401
    | PostOrderUpdates404
    | PostOrderUpdates422
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postOrderUpdates>>,
    TError,
    {data: BodyType<PostOrderUpdatesBody>},
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postOrderUpdates>>,
  TError,
  {data: BodyType<PostOrderUpdatesBody>},
  TContext
> => {
  const mutationOptions = getPostOrderUpdatesMutationOptions(options);

  return useMutation(mutationOptions);
};
