/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Simbora API
 * Documenta√ß√£o da API Simbora
 * OpenAPI spec version: 1.0.0
 */
import {useMutation, useQuery} from 'react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from 'react-query';

import type {
  GetOrderPayments200,
  GetOrderPaymentsId200,
  GetOrderPaymentsIdAnalytics200,
  GetOrderPaymentsParams,
  PutOrderPaymentsIdUpdateStatus200,
  PutOrderPaymentsIdUpdateStatusBody,
} from '.././models';

import {axiosInstance} from '../../axios';
import type {ErrorType, BodyType} from '../../axios';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Lista pagamentos de pedidos com filtros. Admins veem todos, suppliers veem apenas seus pagamentos, customers veem apenas seus pagamentos.
 * @summary Listar pagamentos
 */
export const getOrderPayments = (
  params?: GetOrderPaymentsParams,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal,
) => {
  return axiosInstance<GetOrderPayments200>(
    {url: '/order-payments', method: 'GET', params, signal},
    options,
  );
};

export const getGetOrderPaymentsQueryKey = (
  params?: GetOrderPaymentsParams,
) => {
  return ['/order-payments', ...(params ? [params] : [])] as const;
};

export const getGetOrderPaymentsQueryOptions = <
  TData = Awaited<ReturnType<typeof getOrderPayments>>,
  TError = ErrorType<void>,
>(
  params?: GetOrderPaymentsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getOrderPayments>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
) => {
  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetOrderPaymentsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getOrderPayments>>
  > = ({signal}) => getOrderPayments(params, requestOptions, signal);

  return {queryKey, queryFn, ...queryOptions} as UseQueryOptions<
    Awaited<ReturnType<typeof getOrderPayments>>,
    TError,
    TData
  > & {queryKey: QueryKey};
};

export type GetOrderPaymentsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getOrderPayments>>
>;
export type GetOrderPaymentsQueryError = ErrorType<void>;

/**
 * @summary Listar pagamentos
 */

export function useGetOrderPayments<
  TData = Awaited<ReturnType<typeof getOrderPayments>>,
  TError = ErrorType<void>,
>(
  params?: GetOrderPaymentsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getOrderPayments>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} {
  const queryOptions = getGetOrderPaymentsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Retorna detalhes completos de um pagamento espec√≠fico
 * @summary Buscar pagamento por ID
 */
export const getOrderPaymentsId = (
  id: number,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal,
) => {
  return axiosInstance<GetOrderPaymentsId200>(
    {url: `/order-payments/${id}`, method: 'GET', signal},
    options,
  );
};

export const getGetOrderPaymentsIdQueryKey = (id: number) => {
  return [`/order-payments/${id}`] as const;
};

export const getGetOrderPaymentsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getOrderPaymentsId>>,
  TError = ErrorType<void>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getOrderPaymentsId>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
) => {
  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetOrderPaymentsIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getOrderPaymentsId>>
  > = ({signal}) => getOrderPaymentsId(id, requestOptions, signal);

  return {queryKey, queryFn, enabled: !!id, ...queryOptions} as UseQueryOptions<
    Awaited<ReturnType<typeof getOrderPaymentsId>>,
    TError,
    TData
  > & {queryKey: QueryKey};
};

export type GetOrderPaymentsIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getOrderPaymentsId>>
>;
export type GetOrderPaymentsIdQueryError = ErrorType<void>;

/**
 * @summary Buscar pagamento por ID
 */

export function useGetOrderPaymentsId<
  TData = Awaited<ReturnType<typeof getOrderPaymentsId>>,
  TError = ErrorType<void>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getOrderPaymentsId>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} {
  const queryOptions = getGetOrderPaymentsIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Atualiza o status de um pagamento espec√≠fico. Apenas admins podem fazer esta opera√ß√£o.
 * @summary Atualizar status do pagamento
 */
export const putOrderPaymentsIdUpdateStatus = (
  id: number,
  putOrderPaymentsIdUpdateStatusBody: BodyType<PutOrderPaymentsIdUpdateStatusBody>,
  options?: SecondParameter<typeof axiosInstance>,
) => {
  return axiosInstance<PutOrderPaymentsIdUpdateStatus200>(
    {
      url: `/order-payments/${id}/update-status`,
      method: 'PUT',
      headers: {'Content-Type': 'application/json'},
      data: putOrderPaymentsIdUpdateStatusBody,
    },
    options,
  );
};

export const getPutOrderPaymentsIdUpdateStatusMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putOrderPaymentsIdUpdateStatus>>,
    TError,
    {id: number; data: BodyType<PutOrderPaymentsIdUpdateStatusBody>},
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putOrderPaymentsIdUpdateStatus>>,
  TError,
  {id: number; data: BodyType<PutOrderPaymentsIdUpdateStatusBody>},
  TContext
> => {
  const mutationKey = ['putOrderPaymentsIdUpdateStatus'];
  const {mutation: mutationOptions, request: requestOptions} = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : {...options, mutation: {...options.mutation, mutationKey}}
    : {mutation: {mutationKey}, request: undefined};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putOrderPaymentsIdUpdateStatus>>,
    {id: number; data: BodyType<PutOrderPaymentsIdUpdateStatusBody>}
  > = props => {
    const {id, data} = props ?? {};

    return putOrderPaymentsIdUpdateStatus(id, data, requestOptions);
  };

  return {mutationFn, ...mutationOptions};
};

export type PutOrderPaymentsIdUpdateStatusMutationResult = NonNullable<
  Awaited<ReturnType<typeof putOrderPaymentsIdUpdateStatus>>
>;
export type PutOrderPaymentsIdUpdateStatusMutationBody =
  BodyType<PutOrderPaymentsIdUpdateStatusBody>;
export type PutOrderPaymentsIdUpdateStatusMutationError = ErrorType<void>;

/**
 * @summary Atualizar status do pagamento
 */
export const usePutOrderPaymentsIdUpdateStatus = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putOrderPaymentsIdUpdateStatus>>,
    TError,
    {id: number; data: BodyType<PutOrderPaymentsIdUpdateStatusBody>},
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof putOrderPaymentsIdUpdateStatus>>,
  TError,
  {id: number; data: BodyType<PutOrderPaymentsIdUpdateStatusBody>},
  TContext
> => {
  const mutationOptions =
    getPutOrderPaymentsIdUpdateStatusMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Retorna dados anal√≠ticos detalhados de um pagamento espec√≠fico
 * @summary Obter an√°lises do pagamento
 */
export const getOrderPaymentsIdAnalytics = (
  id: number,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal,
) => {
  return axiosInstance<GetOrderPaymentsIdAnalytics200>(
    {url: `/order-payments/${id}/analytics`, method: 'GET', signal},
    options,
  );
};

export const getGetOrderPaymentsIdAnalyticsQueryKey = (id: number) => {
  return [`/order-payments/${id}/analytics`] as const;
};

export const getGetOrderPaymentsIdAnalyticsQueryOptions = <
  TData = Awaited<ReturnType<typeof getOrderPaymentsIdAnalytics>>,
  TError = ErrorType<void>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getOrderPaymentsIdAnalytics>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
) => {
  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetOrderPaymentsIdAnalyticsQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getOrderPaymentsIdAnalytics>>
  > = ({signal}) => getOrderPaymentsIdAnalytics(id, requestOptions, signal);

  return {queryKey, queryFn, enabled: !!id, ...queryOptions} as UseQueryOptions<
    Awaited<ReturnType<typeof getOrderPaymentsIdAnalytics>>,
    TError,
    TData
  > & {queryKey: QueryKey};
};

export type GetOrderPaymentsIdAnalyticsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getOrderPaymentsIdAnalytics>>
>;
export type GetOrderPaymentsIdAnalyticsQueryError = ErrorType<void>;

/**
 * @summary Obter an√°lises do pagamento
 */

export function useGetOrderPaymentsIdAnalytics<
  TData = Awaited<ReturnType<typeof getOrderPaymentsIdAnalytics>>,
  TError = ErrorType<void>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getOrderPaymentsIdAnalytics>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} {
  const queryOptions = getGetOrderPaymentsIdAnalyticsQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
